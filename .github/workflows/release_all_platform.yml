name: Release

on:
  # This allows for manual triggering of the action
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: ''
      note:
        required: false
        description: 'Release note'
        default: ''
      pre_release:
        required: false
        default: false
        type: boolean
        description: 'Pre release?'

jobs:
  build-project:
    name: Build project 
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: First-3D-Game

    strategy:
      fail-fast: false
      matrix:
        targetPlatform:         # These are the definitions from: https://docs.unity3d.com/ScriptReference/BuildTarget.html
#          - StandaloneOSX       # Build a macOS standalone (Intel 64-bit).
#          - StandaloneWindows64 # Build a Windows 64-bit standalone.
#          - StandaloneLinux64   # Build a Linux 64-bit standalone
          - WebGL               # Build for WebGL

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-build-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-build-${{ matrix.targetPlatform }}
            Library-   
            
      - name: Build Unity Project
        id: build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.PROJECT_NAME }}

      # We manually compress the MacOS build, as uploading as an Artifact causes issues on MacOS
      - name: Compress GitHub Release File (MacOS)
        if: matrix.targetPlatform == 'StandaloneOSX'
        run: |
          pushd build/${{ matrix.targetPlatform }}
          sudo zip -r ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip ./${{ env.PROJECT_NAME }}.app
          popd
          sudo mv build/${{ matrix.targetPlatform }}/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip

      - name: Compress GitHub Release File
        if: matrix.targetPlatform != 'StandaloneOSX'
        run: |
          pushd build/${{ matrix.targetPlatform }}
          sudo zip -r ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip ./*
          popd
          sudo mv build/${{ matrix.targetPlatform }}/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}
          path: build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip

      - name: Deploy Binary WebGL Build to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        if: matrix.targetPlatform == 'WebGL'
        with:
          branch: gh-pages # The branch the action should deploy binary to.
          folder: build/${{ matrix.targetPlatform }}/${{ env.PROJECT_NAME }} # The folder the action should use to deploy to github page branch.

      # More details on usage here: https://github.com/marketplace/actions/create-release
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ inputs.pre_release }}
          allowUpdates: true
          tag: ${{ inputs.tag }} # Or what ever tag you want, but there must be a tag!
          body: ${{ inputs.note }}
          artifacts: 'build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
