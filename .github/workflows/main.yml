name: Test, Build, and Deploy with GameCI
on:
  push:
    branches:
      - release
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - '.github/workflows/**'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      release_platform:
        description: 'release [ios, web, testflight]'
        required: false
        default: 'release '
jobs:
  test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    steps:
      # Checkout with lfs
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-test-${{ hashFiles('Assets/**') }}
          restore-keys: |
            Library-test-${{ hashFiles('Assets/**') }}
            Library-test

      - name: Run Tests
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
  
  buildForWebGL:
    name: Build for WebGL
    needs: test
    if: |
      github.event_name == 'pull_request' 
      || github.event.action == 'published' 
      || (contains(github.event.inputs.release_platform, 'release') 
            && contains(github.event.inputs.release_platform, 'web'))
    uses: ./.github/workflows/buildWithLinux.yml
    with:
      platform: WebGL
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  
  deployToGitHubPages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: buildForWebGL
    if: |
      github.event_name == 'pull_request' 
      || github.event.action == 'published' 
      || (contains(github.event.inputs.release_platform, 'release') 
            && contains(github.event.inputs.release_platform, 'web'))
    steps:
      - name: Echo Build Version
        run: echo ${{ needs.buildForWebGL.outputs.buildVersion }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: false

      - name: Download WebGL Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-WebGL
          path: build/WebGL

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build/WebGL/WebGL
          commit-message: Deploy
          single-commit: true

      - name: Cleanup to avoid storage limit
        uses: geekyeggo/delete-artifact@v5
        if: always()
        with:
          name: build-WebGL
          failOnError: false
